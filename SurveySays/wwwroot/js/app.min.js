function fetchJson(n,t){return fetch(n,t).then(n=>{if(!n.ok){console.error("Invalid response",n);throw new Error(404==n.status?"Not found":"Invalid response");}return n.json()})}function buildRoute(){var n=this;if(!(n&&n instanceof buildRoute))return new buildRoute;n.path=[];n.route=""}const apiService={root:"/api",appendParams:function(n,t){if(t)for(let r=Object.getOwnPropertyNames(t),f=r.length,i=0,u=n.indexOf("?")==-1;i<f;i++)u?(n+="?",u=!1):n+="&",n+=encodeURIComponent(r[i]),n+="=",n+=encodeURIComponent(t[r[i]]);return n},loadGames:function(n,t){return fetchJson(this.appendParams(this.root+"/game/"+encodeURIComponent(n),t),{credentials:"same-origin"})},loadGroup:function(n,t){var i=fetchJson(this.root+"/group/"+encodeURIComponent(n)+"/"+encodeURIComponent(t),{credentials:"same-origin"});return i.then(n=>{cache.groupName(t,n.name),cache.save()}),i},loadGroups:function(n){var t=fetchJson(this.root+"/group/"+encodeURIComponent(n||"en"),{credentials:"same-origin"});return t.then(n=>{n.forEach(n=>cache.groupName(n.id,n.name)),cache.save()}),t},loadSurvey:function(n,t){return fetchJson(this.root+"/survey/"+encodeURIComponent(n)+"/"+encodeURIComponent(t),{credentials:"same-origin"})},loadSurveys:function(n,t){return fetchJson(this.appendParams(this.root+"/survey/"+encodeURIComponent(n),t),{credentials:"same-origin"})},saveGame:function(n){var t=this.root+"/game/"+encodeURIComponent(n.groupId),i="POST";return n.id&&(t+="/"+encodeURIComponent(n.id),i="PUT"),fetchJson(t,{method:i,cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",referrerPolicy:"no-referrer",body:JSON.stringify(n)})},saveSurvey:function(n){var t=this.root+"/survey/"+encodeURIComponent(n.groupId),i="POST";return n.id&&(t+="/"+encodeURIComponent(n.id),i="PUT"),fetchJson(t,{method:i,cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",referrerPolicy:"no-referrer",body:JSON.stringify(n)})}},cache={_groupName:{},groupName:function(n,t){return t?(this._groupName[(n||"").toLowerCase()]=t,this):this._groupName[(n||"").toLowerCase()]},save:function(){var n=this._groupName;localStorage.setItem("cache.groupname",JSON.stringify(n))}};(function(){var n=localStorage.getItem("cache.groupname");n&&(cache._groupName=JSON.parse(n))})();const _debug=1,CONNECTION_STATUS={Connected:1,Disconnected:0,Pending:2,Trouble:9},gameHub=(new signalR.HubConnectionBuilder).withUrl("/gameHub").withAutomaticReconnect().build();(function(){function n(t,f){n.timer||window.closing||(n.timer=setTimeout(function(){i().then(t,f)},u[n.attempt]||r),n.attempt++,console.log("Reconnecting (attempt "+n.attempt+")..."))}function i(){return n.timer=0,new Promise((i,r)=>{"Connected"==gameHub.state?i(gameHub):"Disconnected"!=gameHub.state&&t?t.then(i,r):t=gameHub.start().then(function(){n.attempt=0;i(gameHub)},function(t){console.error("Connection problem",t);n(i,r)})})}const r=1e4,u=[300,600,1500,3e3];gameHub.onclose(function(t){_debug&&console.log("gameHub connection closed",t);n()});gameHub.onreconnected(function(n){_debug&&console.log("gameHub reconnected",n)});gameHub.onreconnecting(function(n){_debug&&console.log("gameHub reconnecting",n)});n.attempt=0;n.timer=0;var t;window.startHubAsync=i})();const routes=[],breadcrumbs=[];$.extend(buildRoute.prototype,{add:function(n){return"string"==typeof n&&(n={text:n}),this.route=n.route||n.url||this.route,this.path.push(this.active=n),this},addRoute:function(n,t){return this.add({text:n,route:this.route+"/"+encodeURIComponent(t)})},addUrl:function(n,t){return this.add({text:n,url:this.route+"/"+encodeURIComponent(t)})},apply:function(){return breadcrumbs.splice.apply(breadcrumbs,[0,breadcrumbs.length].concat(this.path)),this},peek:function(){return this.active}});Vue.component("breadcrumb-nav",{data:function(){return{items:breadcrumbs}},template:`<nav aria-label="breadcrumb" id="breadcrumb" style="display:none" v-show="items.length > 0">
	<ol class="breadcrumb">
		<li v-for="item in items" class="breadcrumb-item" :class="{'active': !(item.route || item.url)}">
			<router-link v-if="item.route" :to="item.route">{{item.text}}</router-link>
			<a v-else-if="item.url" :href="item.url">{{item.text}}</a>
			<span v-else>{{item.text}}</span>
		</li>
	</ol>
</nav>`});Vue.component("answer-board",{props:{answers:Array,prefix:{"default":"survey_answer_",type:String}},template:`<ol class="answer-board list-unstyled">
	<survey-answer v-for="(answer, index) in answers" :answer="answer" :index="index" :prefix="prefix"></survey-answer>
</ol>`});Vue.component("survey-answer",{props:{answer:Object,edit:Object,index:{required:!0,type:Number},prefix:{"default":"survey_answer_",type:String}},computed:{scoreId:function(){return this.prefix+this.index+"_score"},textId:function(){return this.prefix+this.index+"_text"}},methods:{answerClick:function(n){this.$emit("answer-click",{$event:n,answer:this.answer,index:this.index})},answerKeyDown:function(n){this.$emit("answer-keydown",{$event:n,answer:this.answer,index:this.index})},emitEdit:function(){this.$emit("answer-edit",{$event:e,answer:this.answer,index:this.index,edit:this.edit})},scoreBlur:function(){this.answer.score=parseFloat(this.edit.score,10)||(this.edit.score=this.edit.$o.score);this.emitEdit()},textBlur:function(){this.answer.text=this.edit.text.trim()||(this.edit.text=this.edit.$o.text);this.emitEdit()}},template:`<li class="survey-answer" :id="prefix + index" @click="answerClick($event)" @keydown="answerKeyDown($event)">
	<div v-if="edit" class="survey-answer-edit form-row">
		<div class="col-sm">
			<label :for="textId">Text</label>
			<input type="text" :id="textId" class="form-control" v-model="edit.text" @blur="textBlur($event)" required />
		</div>
		<div class="col-sm-auto">
			<label :for="scoreId">Score</label>
			<input type="text" :id="scoreId" class="form-control" inputmode="numeric" placeholder="Score" v-model.number="edit.score" @blur="scoreBlur($event)" required />
		</div>
	</div>
	<div v-else-if="answer" class="survey-answer-show">
		<div class="survey-answer-text">{{answer.text}}</div>
		<div class="survey-answer-score">{{answer.score}}</div>
		<slot></slot>
	</div>
	<div v-else class="survey-answer-hide">
		<div class="survey-answer-index badge badge-pill badge-secondary">{{index + 1}}</div>
	</div>
</li>`});Vue.component("survey-board",{props:{answers:Array,prefix:{"default":"survey_answer_",type:String},selected:Array},methods:{answerClick:function(n){this.$emit("answer-click",n)},isSelected:function(n){var t=this.selected;return t?t.find(t=>t&&t.text==n.text):!1}},template:`<ol class="survey-board list-unstyled">
	<survey-answer v-for="(answer, index) in answers" :answer="answer" :index="index" :class="{'survey-answer-selected': isSelected(answer)}" @answer-click="answerClick($event)" :prefix="prefix"></survey-answer>
</ol>`});Vue.component("sign-in",{data:function(){var n={name:localStorage.getItem("user:name")};return n.edit=!n.name,n},methods:{ok:function(){this.name&&(localStorage.setItem("user:name",this.name),this.$emit("sign-in",{name:this.name}),this.edit=!1)}},template:`<div>
	<div v-if="edit">
		<div class="form-group">
			<label for="user_name">Name</label>
			<input type="text" class="form-control" id="user_name" v-model.trim="name" required aria-describedby="user_name_help" />
			<small class="form-text text-muted" id="user_name_help">Your name will appear to the other players</small>
		</div>
		<button type="button" class="btn btn-primary" :disabled="!name" @click="ok">OK</button>
	</div>
	<div v-else>
		<p class="lead">Welcome {{name}}</p>
		<button type="button" class="btn btn-link" @click="edit = true">Not {{name}}?</button>
	</div>
</div>`});const hostRoutes=[];routes.push({path:"/host",component:{template:`<div>
	<router-view></router-view>
</div>`},children:hostRoutes});hostRoutes.push({path:"",component:{beforeRouteEnter:function(n,t,i){i(t=>t.loadData(n.query.lang))},beforeRouteUpdate:function(n,t,i){this.loadData(n.query.lang);i()},data:function(){return{groups:null,groupsProblem:null}},methods:{groupUrl:n=>"/host/"+encodeURIComponent(n.id),loadData:function(n){var t=this;t.bc=buildRoute().add("Groups","play").apply();apiService.loadGroups(n).then(n=>t.groups=n,n=>t.groupsProblem=n||"There was a problem loading the groups.")}},template:`<div class="container">
	<h2>Groups</h2>
	<ul v-if="groups">
		<li v-for="group in groups"><router-link :to="groupUrl(group)">{{group.name}}</router-link></li>
	</ul>
	<div v-else-if="groupsProblem" class="alert alert-danger">{{groupsProblem}}</div>
	<div v-else>Loading...</div>
</div>`}});hostRoutes.push({path:":groupId",component:{beforeRouteEnter:function(n,t,i){i(t=>t.loadData(n.params.groupId))},beforeRouteUpdate:function(n,t,i){this.loadData(n.params.groupId);i()},data:function(){return{games:null,gamesProblem:null,groupId:null,group:null,groupProblem:null,question:"",questionProblem:null,surveys:null,surveysProblem:null}},computed:{groupHtml:function(){return marked(this.group.text,{sanitize:!0})}},methods:{gameUrl:function(n){return"/host/"+encodeURIComponent(this.groupId)+"/"+encodeURIComponent(n.surveyId)+"/"+encodeURIComponent(n.id)},loadData:function(n){var t=this;(n=n.toLowerCase(),n!=t.groupId)&&(t.bc=buildRoute().addRoute("Groups","host").add(cache.groupName(n)||n).apply(),t.groupProblem=t.gamesProblem=t.surveysProblem=null,apiService.loadGroup("en",t.groupId=n).then(n=>{t.group=n,n.name&&(t.bc.active.text=n.name)},n=>t.groupProblem=n||"There was a problem loading the group."),apiService.loadSurveys(n,{host:user.id}).then(n=>t.surveys=n,n=>t.surveysProblem=n||"There was a problem loading the surveys."),apiService.loadGames(n,{host:user.id}).then(n=>t.games=n,n=>t.gamesProblem=n||"There was a problem loading the games."))},surveySave:function(){var n=this,t=n.question.trim();t?(n.questionProblem=0,apiService.saveSurvey({groupId:n.groupId,question:t}).then(t=>n.$router.push("/host/"+encodeURIComponent(n.groupId)+"/"+encodeURIComponent(t.id)),t=>n.questionProblem=t||"There was a problem saving the survey.")):n.questionProblem="You must enter a question."},surveyUrl:function(n){return"/host/"+encodeURIComponent(this.groupId)+"/"+encodeURIComponent(n.id)}},template:`<div class="container">
	<h2>Group</h2>
	<div v-if="group">
		<p class="lead">{{group.name}}</p>
		<div v-if="group.text" v-html="groupHtml" class="form-group"></div>

		<h3>Your Surveys</h3>
		<div v-if="surveysProblem" class="alert alert-danger">{{surveysProblem}}</div>
		<div v-else-if="!surveys">Loading...</div>
		<ul v-else-if="surveys.length > 0">
			<li v-for="survey in surveys">
				<router-link :to="surveyUrl(survey)">{{survey.question}}</router-link>
			</li>
		</ul>
		<div v-else>There aren't any surveys in this group</div>
		<div class="form-group">
			<button type="button" class="btn btn-outline-primary" data-toggle="modal" data-target="#survey_modal">Create a survey</button>
		</div>

		<h3>Your Games</h3>
		<div v-if="gamesProblem" class="alert alert-danger">{{gamesProblem}}</div>
		<div v-else-if="!games">Loading...</div>
		<ul v-else-if="games.length > 0">
			<li v-for="game in games">
				<router-link :to="gameUrl(game)">{{game.name}} ({{game.question || "new"}})</router-link>
			</li>
		</ul>
		<div v-else>You haven't started any games in this group</div>
	</div>
	<div v-else-if="groupProblem">{{groupProblem}}</div>
	<div v-else>Loading...</div>

	<div class="modal fade" id="survey_modal" tabindex="-1" aria-labelledby="survey_title" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="survey_title">New Survey</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="form-group">
						<label for="survey_question">Survey Question</label>
						<input id="survey_question" class="form-control" :class="{'is-invalid': questionProblem}" v-model="question" required="required" aria-describedby="survey_question_problem" />
						<div id="survey_question_problem" class="invalid-feedback" v-show="questionProblem">{{questionProblem}}</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-primary" @click="surveySave($event)" :disabled="questionProblem === 0">OK</button>
				</div>
			</div>
		</div>
	</div>
</div>`}});hostRoutes.push({path:":groupId/:surveyId",component:{beforeRouteEnter:function(n,t,i){i(t=>t.loadData(n.params.groupId,n.params.surveyId))},beforeRouteUpdate:function(n,t,i){this.loadData(n.params.groupId,n.params.surveyId);i()},data:function(){return{currentAnswer:null,editAnswer:null,editQuestion:"",games:null,gamesProblem:null,gameName:"",gameProblem:null,groupId:null,newAnswers:[],questionProblem:null,surveyId:null,survey:null,surveyProblem:null}},computed:{totalScore:function(){var n=0;return this.survey.answers.forEach(t=>n+=t.score),n}},methods:{answerClick:function(n){if(!n.$event.target||n.$event.target.tagName!="INPUT"){var i=this,t=n.answer;i.isEdit(t)||(i.editAnswer={$o:{score:t.score||0,text:t.text||""},$src:t,score:t.score||0,text:t.text||""});i.$nextTick(function(){$("#survey_answer_"+n.index+" input").first().focus()})}},answerDelete:function(n,t){this.survey.answers.splice(t,1);this.saveSurvey();n.preventDefault();n.stopPropagation()},answerKeyDown:function(n){var t=this,e=n.$event,i=t.survey.answers,r,u,f;switch(e.key){case"ArrowDown":r=i[u=n.index+1];break;case"ArrowUp":r=i[u=n.index-1];break;case"Home":case"PageUp":r=i[u=0];break;case"End":case"PageDown":r=i[u=i.length-1];break;case"Enter":if(t.isEdit(n.answer)){t.editAnswer=null;$(e.target).closest("li").focus();return}t.answerClick(n);break;case" ":if(t.isEdit(n.answer))return;t.answerClick(n);break;case"Backspace":case"Delete":if(t.isEdit(n.answer))return;t.answerDelete(e,n.index);r=i[u=n.index]||i[u=n.index-1];break;case"Escape":if(f=t.isEdit(n.answer),f)f.$src.text=f.$o.text,f.$src.score=f.$o.score,t.editAnswer=null,t.answerSort();else return;default:return}e.preventDefault();r&&(t.currentAnswer=r,t.$nextTick(function(){$("#survey_answer_"+u).focus()}))},answerSort:function(){this.survey&&(this.survey.answers.sort(function(n,t){var i=n.score,r=t.score;return i<r?1:i>r?-1:(i=n.text.toLowerCase(),r=t.text.toLowerCase(),i<r)?-1:i>r?1:0}),this.saveSurvey())},gameLink:function(n){return"/host/"+encodeURIComponent(this.groupId)+"/"+encodeURIComponent(this.surveyId)+"/"+encodeURIComponent(n.id)},gameSave:function(){var n=this,t=n.gameName.trim(),i=t.toLowerCase();t?n.games.find(n=>(n.name||n.id).toLowerCase()==i)?n.gameProblem="The game name should be unique.":(n.gameProblem=0,apiService.saveGame({groupId:n.groupId,name:t,answers:n.survey.answers.map(()=>null),question:n.survey.question,surveyId:n.surveyId}).then(t=>{n.games.push(t),$("#game_modal").modal("hide"),n.gameProblem=null},t=>n.gameProblem=t||"There was a problem saving.")):n.gameProblem="You must enter a name for your new game."},isEdit:function(n){var t=this.editAnswer;return t&&t.$src==n?t:null},loadData:function(n,t){var i=this;(n=n.toLowerCase(),t=t.toLowerCase(),n!=i.groupId||t!=i.surveyId)&&(i.bc=buildRoute().addRoute("Groups","host").addRoute(cache.groupName(n)||n,n).add("Survey").apply(),i.survey=i.surveyProblem=i.gamesProblem=null,apiService.loadSurvey(i.groupId=n,i.surveyId=t).then(n=>{i.survey=n,i.currentAnswer=n.answers[0]},n=>i.surveyProblem=n||"Invalid survey"),apiService.loadGames(n,{survey:t,host:user.id}).then(n=>i.games=n,n=>i.gamesProblem=n||"Invalid survey"))},newAnswerAdd:function(){var n=this;n.newAnswers.push({$o:{score:0,text:""},$src:{score:0,text:""},score:0,text:""});n.$nextTick(function(){$("#new_answer_"+(n.newAnswers.length-1)+" input").first().focus()})},newAnswerEdit:function(n){n.answer.text&&n.answer.score&&(this.newAnswers.splice(n.index,1),this.survey.answers.push(n.answer),this.answerSort())},newAnswerKeyDown:function(n){var t=this,i=n.$event;switch(i.key){case"Escape":t.newAnswers.splice(n.index,1)}},questionEdit:function(n){this.editQuestion=this.survey.question||"";n.preventDefault()},questionSave:function(){var n=this,t=n.editQuestion.trim();if(t&&(n.questionProblem=0,n.survey.question!=t)){n.survey.question=t;n.saveSurvey().then(()=>{$("#question_modal").modal("hide"),n.questionProblem=null},t=>n.questionProblem=t||"There was a problem saving the question.");return}$("#question_modal").modal("hide")},saveSurvey:function(){return apiService.saveSurvey(this.survey)}},template:`<div class="container">
	<h2>Survey</h2>
	<div v-if="survey">
		<div class="game">
			<p class="lead"><a href="#question_modal" data-toggle="modal" @click="questionEdit($event)">{{survey.question}}</a></p>
			<ol class="survey-board survey-active list-unstyled">
				<survey-answer v-for="(answer, index) in survey.answers" :answer="answer" :index="index" :tabindex="answer == currentAnswer ? 0 : -1" :edit="isEdit(answer)" @answer-click="answerClick($event)" @answer-keydown="answerKeyDown($event)" @answer-edit="answerSort">
					<div class="btn-group ml-3">
						<button type="button" class="btn btn-outline-secondary fas fa-compress-alt" aria-label="Merge" tabindex="-1"></button>
						<button type="button" class="btn btn-outline-secondary far fa-trash-alt" aria-label="Delete" tabindex="-1" @click="answerDelete($event, index)"></button>
					</div>
				</survey-answer>
			</ol>
			<div class="form-group">{{survey.answers.length}} answer(s), totaling {{totalScore}}</div>
			<ol class="survey-board survey-active list-unstyled">
				<survey-answer v-for="(answer, index) in newAnswers" :answer="answer.$src" :index="index" tabindex="0" :edit="answer" prefix="new_answer_" @answer-keydown="newAnswerKeyDown($event)" @answer-edit="newAnswerEdit"></survey-answer>
			</ol>
			<button type="button" class="btn btn-outline-primary" @click="newAnswerAdd($event)">Add an Answer</button>
		</div>
	</div>
	<div v-else-if="surveyProblem">{{surveyProblem}}</div>
	<div v-else>Loading...</div>

	<h3 class="mt-3">Games</h3>
	<div v-if="games">
		<div v-if="0 === games.length">No games</div>
		<ul v-else>
			<li v-for="game in games">
				<router-link :to="gameLink(game)">{{game.name || game.id}}</router-link>
			</li>
		</ul>
		<div class="form-group">
			<button type="button" class="btn btn-outline-primary" data-toggle="modal" data-target="#game_modal">Start a new game</button>
		</div>
	</div>
	<div v-else-if="gamesProblem">{{gamesProblem}}</div>
	<div v-else>Loading...</div>

	<div class="modal fade" id="question_modal" tabindex="-1" aria-labelledby="question_title" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="question_title">Survey Question</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="form-group">
						<label for="survey_question">Survey Question</label>
						<input id="survey_question" class="form-control" :class="{'is-invalid': questionProblem}" v-model="editQuestion" required="required" aria-describedby="survey_question_problem" />
						<div id="survey_question_problem" class="invalid-feedback" v-show="questionProblem">{{questionProblem}}</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-primary" @click="questionSave($event)" :disabled="questionProblem === 0 || !survey">OK</button>
				</div>
			</div>
		</div>
	</div>

	<div class="modal fade" id="game_modal" tabindex="-1" aria-labelledby="game_title" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="game_title">New Game</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="form-group">
						<label for="game_name">Game Name</label>
						<input id="game_name" class="form-control" :class="{'is-invalid': gameProblem}" v-model="gameName" required="required" aria-describedby="game_name_problem" />
						<div id="game_name_problem" class="invalid-feedback" v-show="gameProblem">{{gameProblem}}</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-primary" @click="gameSave($event)" :disabled="gameProblem === 0">OK</button>
				</div>
			</div>
		</div>
	</div>
</div>`}});hostRoutes.push({path:":groupId/:surveyId/:gameId",component:{beforeRouteEnter:function(n,t,i){i(t=>t.loadData(n.params.groupId,n.params.surveyId,n.params.gameId))},beforeRouteUpdate:function(n,t,i){this.loadData(n.params.groupId,n.params.surveyId,n.params.gameId);i()},beforeRouteLeave:function(n,t,i){this.disconnect();i()},computed:{gameUrl:function(){return window.location.origin+"/play/"+encodeURIComponent(this.$route.params.groupId)+"/"+encodeURIComponent(this.$route.params.gameId)}},data:function(){return{gameId:null,groupId:null,surveyId:null,game:null,survey:null,surveyProblem:null}},methods:{answerClick:function(n){var i=this,t;i.game&&i.survey&&(t=$.extend(!0,{},i.game),t.answers[n.index]=t.answers[n.index]?null:$.extend({},n.answer),gameHub.send("GameUpdate",t))},connect:function(n,t){var i=this;i.disconnect();gameHub.on("gameUpdate",this.c_gameUpdate=n=>{i.game=n,n.name&&(i.bc.active.text=n.name)});i.c_groupId=n;i.c_gameId=t;startHubAsync().then(function(){gameHub.send("joinGame",{groupId:n,id:t})})},disconnect:function(){var n=this;n.c_gameUpdate&&(gameHub.send("leaveGame",{groupId:n.c_groupId,id:n.c_gameId}),gameHub.off("gameUpdate",n.c_gameUpdate),delete n.c_gameUpdate,delete n.c_groupId,delete n.c_gameId)},loadData:function(n,t,i){var r=this;(i=i.toLowerCase(),n=n.toLowerCase(),t=t.toLowerCase(),r.bc=buildRoute().addRoute("Groups","host").addRoute(cache.groupName(n)||n,n).addRoute("Survey",t).add("Host Game").apply(),(n!=r.groupId||i!=r.gameId)&&(r.gameId=i,r.connect(n,i)),n!=r.groupId||t!=r.surveyId)&&(r.survey=r.surveyProblem=null,apiService.loadSurvey(r.groupId=n,r.surveyId=t).then(n=>r.survey=n,n=>r.surveyProblem=n||"Invalid survey"))}},template:`<div class="container-fluid pt-3">
	<div class="card-deck">
		<div class="card">
			<div class="card-body">
				<h2 class="card-title">Survey</h2>
				<div v-if="survey">
					<div class="game">
						<p class="lead">{{survey.question}}</p>
						<survey-board class="survey-active" :answers="survey.answers" :selected="game && game.answers" @answer-click="answerClick($event)"></survey-board>
					</div>
				</div>
				<div v-else-if="surveyProblem">{{surveyProblem}}</div>
				<div v-else>Loading...</div>
			</div>
			<div class="card-footer">
				Link to play: <a :href="gameUrl">{{gameUrl}}</a>
			</div>
		</div>
		<div class="card">
			<div v-if="game" class="card-body">
				<h2>{{ game.name }}</h2>
				<div class="game">
					<p class="lead">{{game.question}}</p>
					<answer-board :answers="game.answers" prefix="game_answer_"></answer-board>
				</div>
			</div>
			<div v-else class="card-body">Loading...</div>
			<div class="card-footer">This is how the game currently appears to players</div>
		</div>
	</div>
</div>`}});const playRoutes=[];routes.push({path:"/play",component:{template:`<div>
	<router-view></router-view>
</div>`},children:playRoutes});playRoutes.push({path:"",component:{beforeRouteEnter:function(n,t,i){i(t=>t.loadData(n.query.lang))},beforeRouteUpdate:function(n,t,i){this.loadData(n.query.lang);i()},data:function(){return{groups:null,groupsProblem:null}},methods:{groupUrl:n=>"/play/"+encodeURIComponent(n.id),loadData:function(n){var t=this;t.bc=buildRoute().add("Groups","play").apply();apiService.loadGroups(n).then(n=>t.groups=n,n=>t.groupsProblem=n||"There was a problem loading the groups.")}},template:`<div class="container">
	<h2>Groups</h2>
	<ul v-if="groups">
		<li v-for="group in groups"><router-link :to="groupUrl(group)">{{group.name}}</router-link></li>
	</ul>
	<div v-else-if="groupsProblem" class="alert alert-danger">{{groupsProblem}}</div>
	<div v-else>Loading...</div>
</div>`}});playRoutes.push({path:":groupId",component:{beforeRouteEnter:function(n,t,i){i(t=>t.loadData(n.params.groupId))},beforeRouteUpdate:function(n,t,i){this.loadData(n.params.groupId);i()},data:function(){return{games:null,gamesProblem:null,groupId:null,group:null,groupProblem:null,question:"",questionProblem:null}},computed:{groupHtml:function(){return marked(this.group.text,{sanitize:!0})}},methods:{gameUrl:function(n){return"/play/"+encodeURIComponent(this.groupId)+"/"+encodeURIComponent(n.id)},loadData:function(n){var t=this;(n=n.toLowerCase(),n!=t.groupId)&&(t.bc=buildRoute().addRoute("Groups","play").add(cache.groupName(n)||n).apply(),t.groupProblem=t.gamesProblem=null,apiService.loadGroup("en",t.groupId=n).then(n=>{t.group=n,n.name&&(t.bc.active.text=n.name)},n=>t.groupProblem=n||"There was a problem loading the group."),apiService.loadGames(n).then(n=>t.games=n,n=>t.gamesProblem=n||"There was a problem loading the games."))}},template:`<div class="container">
	<h2>Group</h2>
	<div v-if="group">
		<p class="lead">{{group.name}}</p>
		<div v-if="group.text" v-html="groupHtml" class="form-group"></div>

		<h3>Available Games</h3>
		<div v-if="gamesProblem" class="alert alert-danger">{{gamesProblem}}</div>
		<div v-else-if="!games">Loading...</div>
		<ul v-else-if="games.length > 0">
			<li v-for="game in games">
				<router-link :to="gameUrl(game)">{{game.name}} ({{game.question || "new"}})</router-link>
			</li>
		</ul>
		<div v-else>You haven't started any games in this group</div>
	</div>
	<div v-else-if="groupProblem">{{groupProblem}}</div>
	<div v-else>Loading...</div>
</div>`}});playRoutes.push({path:":groupId/:gameId",component:{beforeRouteEnter:function(n,t,i){i(t=>t.connect(n.params.groupId,n.params.gameId))},beforeRouteUpdate:function(n,t,i){this.connect(n.params.groupId,n.params.gameId);i()},beforeRouteLeave:function(n,t,i){this.disconnect();i()},data:function(){return{game:null}},methods:{connect:function(n,t){var i=this;i.bc=buildRoute().addRoute("Groups","play").addRoute(cache.groupName(n)||n,n).add("Game").apply();i.disconnect();gameHub.on("gameUpdate",this.c_gameUpdate=n=>{i.game=n,n.name&&(i.bc.active.text=n.name)});i.c_groupId=n;i.c_gameId=t;startHubAsync().then(function(){gameHub.send("joinGame",{groupId:n,id:t})})},disconnect:function(){var n=this;n.c_gameUpdate&&(gameHub.send("leaveGame",{groupId:n.c_groupId,id:n.c_gameId}),gameHub.off("gameUpdate",n.c_gameUpdate),delete n.c_gameUpdate,delete n.c_groupId,delete n.c_gameId)}},template:`<div class="container">
	<div v-if="game" class="game">
		<h2>{{ game.name }}</h2>
		<p class="lead">{{game.question}}</p>
		<answer-board :answers="game.answers"></answer-board>
	</div>
	<div v-else>Loading...</div>
</div>`}});const Index={template:`<div class="row align-items-center">
	<sign-in class="col-sm"></sign-in>
	<div class="col-sm">
		<router-link to="play" class="btn btn-outline-secondary btn-block btn-lg">Play</router-link>
		<a href="/host" class="btn btn-outline-secondary btn-block btn-lg">Host</a>
	</div>
</div>`};routes.push({path:"/:room",component:Index},{path:"/",component:Index});const router=new VueRouter({mode:"history",routes:routes}),app=new Vue({router}).$mount("#app");