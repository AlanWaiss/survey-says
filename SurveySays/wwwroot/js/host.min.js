const apiService={root:"/api",loadSurvey:function(n,t){return fetchJson(this.root+"/survey/"+encodeURIComponent(n)+"/"+encodeURIComponent(t),{credentials:"same-origin"})},saveSurvey:function(n){var t=this.root+"/survey/"+encodeURIComponent(n.groupId),i="POST";return n.id&&(t+="/"+encodeURIComponent(n.id),i="PUT"),fetchJson(t,{method:i,cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",referrerPolicy:"no-referrer",body:JSON.stringify(n)})}},_debug=1,CONNECTION_STATUS={Connected:1,Disconnected:0,Pending:2,Trouble:9},gameHub=(new signalR.HubConnectionBuilder).withUrl("/gameHub").withAutomaticReconnect().build();(function(){function n(u,f){n.timer||window.closing||(n.timer=setTimeout(function(){t().then(u,f)},r[n.attempt]||i),n.attempt++,console.log("Reconnecting (attempt "+n.attempt+")..."))}function t(){return n.timer=0,new Promise((t,i)=>{gameHub.start().then(function(){n.attempt=0;t(gameHub)},function(r){console.error("Connection problem",r);n(t,i)})})}const i=1e4,r=[300,600,1500,3e3];gameHub.onclose(function(t){_debug&&console.log("gameHub connection closed",t);n()});gameHub.onreconnected(function(n){_debug&&console.log("gameHub reconnected",n)});gameHub.onreconnecting(function(n){_debug&&console.log("gameHub reconnecting",n)});n.attempt=0;n.timer=0;window.startHubAsync=t})();const routes=[],user={id:"",name:""},breadcrumbs=[];Vue.component("breadcrumb-nav",{data:function(){breadcrumbs},template:`<nav aria-label="breadcrumb" id="breadcrumb" style="display:none" v-show="breadcrumbs.length > 0">
	<ol class="breadcrumb">
		<li v-for="item in breadcrumbs" class="breadcrumb-item" :class="{'active': item.active}">
			<router-link v-if="item.route" :to="item.route">{{item.text}}</router-link>
			<a v-else-if="item.url" :href="item.url">{{item.text}}</a>
			<span v-else>{{item.text}}</span>
		</li>
	</ol>
</nav>`});Vue.component("answer-board",{props:{answers:Array,prefix:{"default":"survey_answer_",type:String}},template:`<ol class="answer-board list-unstyled">
	<survey-answer v-for="(answer, index) in answers" :answer="answer" :index="index" :prefix="prefix"></survey-answer>
</ol>`});Vue.component("survey-answer",{props:{answer:Object,index:{required:!0,type:Number},prefix:{"default":"survey_answer_",type:String}},methods:{answerClick:function(n){this.$emit("answer-click",{$event:n,answer:this.answer,index:this.index})}},template:`<li class="survey-answer" :id="prefix + index" @click="answerClick($event)">
	<div v-if="answer" class="survey-answer-show">
		<div class="survey-answer-text">{{answer.text}}</div>
		<div class="survey-answer-score">{{answer.score}}</div>
	</div>
	<div v-else class="survey-answer-hide">
		<div class="survey-answer-index badge badge-pill badge-secondary">{{index + 1}}</div>
	</div>
</li>`});Vue.component("survey-board",{props:{answers:Array,prefix:{"default":"survey_answer_",type:String},selected:Array},methods:{answerClick:function(n){this.$emit("answer-click",n)},isSelected:function(n){var t=this.selected;return t?t.find(t=>t&&t.text==n.text):!1}},template:`<ol class="survey-board list-unstyled">
	<survey-answer v-for="(answer, index) in answers" :answer="answer" :index="index" :class="{'survey-answer-selected': isSelected(answer)}" @answer-click="answerClick($event)" :prefix="prefix"></survey-answer>
</ol>`});Vue.component("sign-in",{data:function(){var n={name:localStorage.getItem("user:name")};return n.edit=!n.name,n},methods:{ok:function(){this.name&&(localStorage.setItem("user:name",this.name),this.$emit("sign-in",{name:this.name}),this.edit=!1)}},template:`<div>
	<div v-if="edit">
		<div class="form-group">
			<label for="user_name">Name</label>
			<input type="text" class="form-control" id="user_name" v-model.trim="name" required aria-describedby="user_name_help" />
			<small class="form-text text-muted" id="user_name_help">Your name will appear to the other players</small>
		</div>
		<button type="button" class="btn btn-primary" :disabled="!name" @click="ok">OK</button>
	</div>
	<div v-else>
		<p class="lead">Welcome {{name}}</p>
		<button type="button" class="btn btn-link" @click="edit = true">Not {{name}}?</button>
	</div>
</div>`});const hostRoutes=[];routes.push({path:"/host",component:{template:`<div>
	<router-view></router-view>
</div>`},children:hostRoutes});hostRoutes.push({path:"",component:{data:function(){return{games:[{id:"0ea9b217-a82a-43ea-9727-93adee35795f",groupId:"tms",question:"What is your favorite Christmas movie?",surveyId:"68f399cb-2daf-4c3a-a0e0-6b9fb8a7dd8b"}]}},methods:{gameUrl:n=>"/host/"+encodeURIComponent(n.groupId)+"/"+encodeURIComponent(n.surveyId)+"/"+encodeURIComponent(n.id)},template:`<ul>
	<li v-for="game in games"><router-link :to="gameUrl(game)">{{game.question}}</router-link></li>
</ul>`}});hostRoutes.push({path:":groupId",component:{data:function(){return{groupId:null,group:null,groupProblem:null}},methods:{},template:`<div class="container">
	<h2>Group</h2>
	<div v-if="group"></div>
	<div v-else-if="groupProblem">{{groupProblem}}</div>
	<div v-else>This is not yet implemented</div>
</div>`}});hostRoutes.push({path:":groupId/:surveyId",component:{beforeRouteEnter:function(n,t,i){var r="/host",u=[0,breadcrumbs.length,{text:"Home",url:"/"},{text:"Host",route:r},{text:n.params.groupId,route:r+="/"+encodeURIComponent(n.params.groupId)},{active:!0,text:"Survey"}];breadcrumbs.splice.apply(breadcrumbs,u);i(t=>t.loadSurvey(n.params.groupId,n.params.surveyId))},beforeRouteUpdate:function(n,t,i){this.loadSurvey(n.params.groupId,n.params.surveyId);i()},data:function(){return{editQuestion:"",groupId:null,questionProblem:null,surveyId:null,survey:null,surveyProblem:null}},methods:{answerClick:function(){},loadSurvey:function(n,t){var i=this;(n!=i.groupId||t!=i.surveyId)&&(i.survey=null,apiService.loadSurvey(i.groupId=n,i.surveyId=t).then(n=>i.survey=n,n=>i.surveyProblem=n||"Invalid survey"))},questionEdit:function(n){this.editQuestion=this.survey.question||"";n.preventDefault()},questionSave:function(){var n=this;if(n.editQuestion&&(n.questionProblem=0,n.survey.question!=n.editQuestion)){n.survey.question=n.editQuestion;apiService.saveSurvey(n.survey).then(()=>{$("#question_modal").modal("hide"),n.questionProblem=null},t=>n.questionProblem=t||"There was a problem saving the question.");return}$("#question_modal").modal("hide")},saveSurvey:function(){}},template:`<div class="container">
	<h2>Survey</h2>
	<div v-if="survey">
		<div class="game">
			<p class="lead"><a href="#question_modal" data-toggle="modal" @click="questionEdit($event)">{{survey.question}}</a></p>
			<survey-board class="survey-active" :answers="survey.answers" @answer-click="answerClick($event)"></survey-board>
			<button type="button" class="btn btn-outline-primary">Add an Answer</button>
		</div>
	</div>
	<div v-else-if="surveyProblem">{{surveyProblem}}</div>
	<div v-else>Loading...</div>
	<div class="modal fade" id="question_modal" tabindex="-1" aria-labelledby="question_title" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="question_title">Survey Question</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="form-group">
						<label for="survey_question">Survey Question</label>
						<input id="survey_question" class="form-control" :class="{'is-invalid': questionProblem}" v-model.trim="editQuestion" required="required" aria-describedby="survey_question_problem" />
						<div id="survey_question_problem" class="invalid-feedback" v-show="questionProblem">{{questionProblem}}</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-primary" @click="questionSave($event)" :disabled="questionProblem === 0">OK</button>
				</div>
			</div>
		</div>
	</div>
</div>`}});hostRoutes.push({path:":groupId/:surveyId/:gameId",component:{beforeRouteEnter:function(n,t,i){var r="/host",u=[0,breadcrumbs.length,{text:"Home",url:"/"},{text:"Host",route:r},{text:n.params.groupId,route:r+="/"+encodeURIComponent(n.params.groupId)},{text:"Survey",route:r+="/"+encodeURIComponent(n.params.surveyId)},{active:!0,text:"Game"}];breadcrumbs.splice.apply(breadcrumbs,u);i(t=>{t.loadSurvey(n.params.groupId,n.params.surveyId),t.connect(n.params.groupId,n.params.gameId)})},beforeRouteUpdate:function(n,t,i){this.disconnect();this.loadSurvey(n.params.groupId,n.params.surveyId);this.connect(n.params.groupId,n.params.gameId);i()},beforeRouteLeave:function(n,t,i){this.disconnect();i()},computed:{gameUrl:function(){return window.location.origin+"/play/"+encodeURIComponent(this.$route.params.groupId)+"/"+encodeURIComponent(this.$route.params.gameId)}},data:function(){return{groupId:null,surveyId:null,game:null,survey:null,surveyProblem:null}},methods:{answerClick:function(n){var t=this,i;t.game&&t.survey&&(i=$.extend(!0,{},t.game),i.answers[n.index]=$.extend({},n.answer),gameHub.send("GameUpdate",i))},connect:function(n,t){var i=this;i.disconnect();gameHub.on("gameUpdate",this.c_gameUpdate=n=>i.game=n);i.c_groupId=n;i.c_gameId=t;startHubAsync().then(function(){gameHub.send("joinGame",{groupId:n,id:t})})},disconnect:function(){var n=this;n.c_gameUpdate&&(gameHub.send("leaveGame",{groupId:n.c_groupId,id:n.c_gameId}),gameHub.off("gameUpdate",n.c_gameUpdate),delete n.c_gameUpdate,delete n.c_groupId,delete n.c_gameId)},loadSurvey:function(n,t){var i=this;(n!=i.groupId||t!=i.surveyId)&&(i.survey=null,apiService.loadSurvey(i.groupId=n,i.surveyId=t).then(n=>i.survey=n,n=>i.surveyProblem=n||"Invalid survey"))}},template:`<div class="container-fluid pt-3">
	<div class="card-deck">
		<div class="card">
			<div class="card-body">
				<h2 class="card-title">Survey</h2>
				<div v-if="survey">
					<div class="game">
						<p class="lead">{{survey.question}}</p>
						<survey-board class="survey-active" :answers="survey.answers" :selected="game && game.answers" @answer-click="answerClick($event)"></survey-board>
					</div>
				</div>
				<div v-else-if="surveyProblem">{{surveyProblem}}</div>
				<div v-else>Loading...</div>
			</div>
			<div class="card-footer">
				Link to play: <a :href="gameUrl">{{gameUrl}}</a>
			</div>
		</div>
		<div class="card">
			<div v-if="game" class="card-body">
				<h2>{{ game.name }}</h2>
				<div class="game">
					<p class="lead">{{game.question}}</p>
					<answer-board :answers="game.answers" prefix="game_answer_"></answer-board>
				</div>
			</div>
			<div v-else class="card-body">Loading...</div>
			<div class="card-footer">This is how the game currently appears to players</div>
		</div>
	</div>
</div>`}});const Index={template:`<div class="row align-items-center">
	<sign-in class="col-sm"></sign-in>
	<div class="col-sm">
		<router-link to="play" class="btn btn-outline-secondary btn-block btn-lg">Play</router-link>
		<a href="/host" class="btn btn-outline-secondary btn-block btn-lg">Host</a>
	</div>
</div>`};routes.push({path:"/:room",component:Index},{path:"/",component:Index});const router=new VueRouter({mode:"history",routes:routes}),app=new Vue({router}).$mount("#app");