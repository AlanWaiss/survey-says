const apiService={root:"/api",loadSurvey:function(n,t){return fetchJson(this.root+"/survey/"+encodeURIComponent(n)+"/"+encodeURIComponent(t),{credentials:"same-origin"})},saveSurvey:function(n){var t=this.root+"/survey/"+encodeURIComponent(n.groupId),i="POST";return n.id&&(t+="/"+encodeURIComponent(n.id),i="PUT"),fetchJson(t,{method:i,cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",referrerPolicy:"no-referrer",body:JSON.stringify(n)})}},_debug=1,CONNECTION_STATUS={Connected:1,Disconnected:0,Pending:2,Trouble:9},gameHub=(new signalR.HubConnectionBuilder).withUrl("/gameHub").withAutomaticReconnect().build();(function(){function n(u,f){n.timer||window.closing||(n.timer=setTimeout(function(){t().then(u,f)},r[n.attempt]||i),n.attempt++,console.log("Reconnecting (attempt "+n.attempt+")..."))}function t(){return n.timer=0,new Promise((t,i)=>{gameHub.start().then(function(){n.attempt=0;t(gameHub)},function(r){console.error("Connection problem",r);n(t,i)})})}const i=1e4,r=[300,600,1500,3e3];gameHub.onclose(function(t){_debug&&console.log("gameHub connection closed",t);n()});gameHub.onreconnected(function(n){_debug&&console.log("gameHub reconnected",n)});gameHub.onreconnecting(function(n){_debug&&console.log("gameHub reconnecting",n)});n.attempt=0;n.timer=0;window.startHubAsync=t})();const routes=[],user={id:"",name:""},breadcrumbs=[];Vue.component("breadcrumb-nav",{data:function(){breadcrumbs},template:`<nav aria-label="breadcrumb" id="breadcrumb" style="display:none" v-show="breadcrumbs.length > 0">
	<ol class="breadcrumb">
		<li v-for="item in breadcrumbs" class="breadcrumb-item" :class="{'active': item.active}">
			<router-link v-if="item.route" :to="item.route">{{item.text}}</router-link>
			<a v-else-if="item.url" :href="item.url">{{item.text}}</a>
			<span v-else>{{item.text}}</span>
		</li>
	</ol>
</nav>`});Vue.component("answer-board",{props:{answers:Array,prefix:{"default":"survey_answer_",type:String}},template:`<ol class="answer-board list-unstyled">
	<survey-answer v-for="(answer, index) in answers" :answer="answer" :index="index" :prefix="prefix"></survey-answer>
</ol>`});Vue.component("survey-answer",{props:{answer:Object,edit:Object,index:{required:!0,type:Number},prefix:{"default":"survey_answer_",type:String}},computed:{scoreId:function(){return this.prefix+this.index+"_score"},textId:function(){return this.prefix+this.index+"_text"}},methods:{answerClick:function(n){this.$emit("answer-click",{$event:n,answer:this.answer,index:this.index})},answerKeyDown:function(n){this.$emit("answer-keydown",{$event:n,answer:this.answer,index:this.index})},emitEdit:function(){this.$emit("answer-edit",{$event:e,answer:this.answer,index:this.index,edit:this.edit})},scoreBlur:function(){this.answer.score=parseFloat(this.edit.score,10)||(this.edit.score=this.edit.$o.score);this.emitEdit()},textBlur:function(){this.answer.text=this.edit.text.trim()||(this.edit.text=this.edit.$o.text);this.emitEdit()}},template:`<li class="survey-answer" :id="prefix + index" @click="answerClick($event)" @keydown="answerKeyDown($event)">
	<div v-if="edit" class="survey-answer-edit form-row">
		<div class="col-sm">
			<label :for="textId">Text</label>
			<input type="text" :id="textId" class="form-control" v-model="edit.text" @blur="textBlur($event)" required />
		</div>
		<div class="col-sm-auto">
			<label :for="scoreId">Score</label>
			<input type="text" :id="scoreId" class="form-control" inputmode="numeric" placeholder="Score" v-model.number="edit.score" @blur="scoreBlur($event)" required />
		</div>
	</div>
	<div v-else-if="answer" class="survey-answer-show">
		<div class="survey-answer-text">{{answer.text}}</div>
		<div class="survey-answer-score">{{answer.score}}</div>
		<slot></slot>
	</div>
	<div v-else class="survey-answer-hide">
		<div class="survey-answer-index badge badge-pill badge-secondary">{{index + 1}}</div>
	</div>
</li>`});Vue.component("sign-in",{data:function(){var n={name:localStorage.getItem("user:name")};return n.edit=!n.name,n},methods:{ok:function(){this.name&&(localStorage.setItem("user:name",this.name),this.$emit("sign-in",{name:this.name}),this.edit=!1)}},template:`<div>
	<div v-if="edit">
		<div class="form-group">
			<label for="user_name">Name</label>
			<input type="text" class="form-control" id="user_name" v-model.trim="name" required aria-describedby="user_name_help" />
			<small class="form-text text-muted" id="user_name_help">Your name will appear to the other players</small>
		</div>
		<button type="button" class="btn btn-primary" :disabled="!name" @click="ok">OK</button>
	</div>
	<div v-else>
		<p class="lead">Welcome {{name}}</p>
		<button type="button" class="btn btn-link" @click="edit = true">Not {{name}}?</button>
	</div>
</div>`});routes.push({path:"/play/:groupId/:gameId",component:{beforeRouteEnter:function(n,t,i){i(t=>t.connect(n.params.groupId,n.params.gameId))},beforeRouteUpdate:function(n,t,i){this.disconnect();this.connect(n.params.groupId,n.params.gameId);i()},beforeRouteLeave:function(n,t,i){this.disconnect();i()},data:function(){return{game:null}},methods:{connect:function(n,t){var i=this;i.disconnect();gameHub.on("gameUpdate",this.c_gameUpdate=n=>i.game=n);i.c_groupId=n;i.c_gameId=t;startHubAsync().then(function(){gameHub.send("joinGame",{groupId:n,id:t})})},disconnect:function(){var n=this;n.c_gameUpdate&&(gameHub.send("leaveGame",{groupId:n.c_groupId,id:n.c_gameId}),gameHub.off("gameUpdate",n.c_gameUpdate),delete n.c_gameUpdate,delete n.c_groupId,delete n.c_gameId)}},template:`<div>
	<div v-if="game" class="game">
		<p class="lead">{{game.question}}</p>
		<answer-board :answers="game.answers"></answer-board>
	</div>
	<div v-else>Loading...</div>
	<div>Ready to play game {{ $route.params.gameId }}</div>
</div>`}});const Index={template:`<div class="row align-items-center">
	<sign-in class="col-sm"></sign-in>
	<div class="col-sm">
		<router-link to="play" class="btn btn-outline-secondary btn-block btn-lg">Play</router-link>
		<a href="/host" class="btn btn-outline-secondary btn-block btn-lg">Host</a>
	</div>
</div>`};routes.push({path:"/:room",component:Index},{path:"/",component:Index});const router=new VueRouter({mode:"history",routes:routes}),app=new Vue({router}).$mount("#app");